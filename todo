enum에 edge를 달기 위해서 Enum::Variant(MaybeUninit)을 하는 함수 만들어서 필드 오프셋 구하고
enum variant index 구하는 함수 만들고
encoder decoder 트레잇 가져오고
이렇게 하고 난 후에는 derive 크레이트에 더 이상 복잡한 구현이 필요 없어진다
왜냐하면 모든 것을 edge로 처리할 수 있기 때문임 tuple인지 sequence인지 struct인지 구분만 할 수 있다면 말야
populate 도 추가해야 함 

todo: impl macro_rules들 전부다 __붙이기  
todo: [취소됨;위험함] 대부분의 S, S2 구분 없애기 -> Flatten 트레잇에 <S> 제네릭 붙여서 없애도 됨  단 impl Add<Rhs> for Padding  은 제외함 [취소됨;위험함]

todo: AllPrimitiveSizeCheck 에 따라서 Edge구현하기...? -> Actor의 Field<A>로 구하기
todo: Model만 repr(Rust)의 영향을 받는다 Bar, Foo도 repr(Rust)하면 repr(C)와 달라지게 테스트하라


mock testing serialization encoder decoder 만들기
                //STOPSHIP test in sandbox crate the difference between &mut usize and usize that
                //effect const inlining


~~Stopship: actor 에서 offset array 만들기 ~~

stopship : mock 구현과 실제 구현 합일화하기


low pirority todo task: remove generic_const_exprs from lib.rs of serialization crate 
todo: rename Len::SIZE to Len::LEN

 todo: vec.rs를 vec/으로 바꾸기 
 learn usecase of repr(transparent)
 vectored<T, V>를 Vectored<T>로 바꾸기 


 todo Option<T>, (T, T2, ...) tuple 
 todo Enum and Vector len
