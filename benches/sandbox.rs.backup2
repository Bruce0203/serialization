#![feature(const_trait_impl)]
#![feature(generic_const_exprs)]
#![feature(specialization)]

use std::hint::black_box;

use divan::{bench, Bencher};
use fastbuf::{Buf, Buffer};
use serialization::{Encode, Serializable};
use serialization_minecraft::PacketEncoder;

#[derive(Serializable)]
pub struct A {}

#[derive(Serializable)]
pub struct Bar {
    v1: i32,
}

#[bench]
fn bench_a(bencher: Bencher) {
    let a = A {};
    let mut buf = Buffer::<1000>::new();
    bencher.bench_local(|| {
        let mut enc = PacketEncoder::new(&mut buf);
        black_box(a.encode(&mut enc)).unwrap();
        unsafe { buf.set_filled_pos(0) };
    });
}

fn main() {
    divan::main();
}
